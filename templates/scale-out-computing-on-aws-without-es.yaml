AWSTemplateFormatVersion: 2010-09-09
Description: (SO0072) - Scale-Out Computing on AWS. Template version 2.5.0
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
            default: Install Location
        Parameters:
          - S3InstallBucket
          - S3InstallFolder

      -
        Label:
            default: China Region Patch
        Parameters:
          - S3PatchBucket
          - S3PatchFolder

      - Label:
          default: Linux Distribution
        Parameters:
          - BaseOS
          - CustomAMI
          - AppsEBSSnap
          - SchedulerInstanceType
      -
        Label:
          default: Network and Security
        Parameters:
          - VpcCidr
          - ClientIp
          - SSHKeyPair
      - Label:
          default: Default LDAP user
        Parameters:
          - UserName
          - UserPassword

    ParameterLabels:
      VpcCidr:
        default: Create your new VPC
      ClientIp:
        default: What's your IP?
      CustomAMI:
        default: (Optional) Have your own AMI?
      SSHKeyPair:
        default: What's your SSH keypair?
      BaseOS:
        default: Linux Distro
      S3InstallBucket:
        default: S3 bucket with your SOCA installer
      S3InstallFolder:
        default: S3 folder where you uploaded the SOCA files
      S3PatchBucket:
        default: S3 bucket with your SOCA Patch
      S3PatchFolder:
        default: S3 folder where you uploaded the SOCA Patch files
      SchedulerInstanceType:
        default: Instance type for your master host
      UserName:
        default: Username for your default LDAP user
      UserPassword:
        default: Password for your default LDAP user

Parameters:
  CustomAMI:
    Type: String
    Description: If you use your own AMI, you still have to specify the base os (see above)
    
  AppsEBSSnap:
    Type: String
    Default: snap-0c12d3c091915fc6e
    Description: Apps EBS Snap id.

  SchedulerInstanceType:
    Default: m5.xlarge
    Type: String
    Description: Choose the type of instance to use for the scheduler

  BaseOS:
    Type: String
    "AllowedValues": [
      "centos7",
      "rhel7",
      "amazonlinux2",
    ]
    "Default": "centos7"
    "Description": IMPORTANT CENTOS USERS > You MUST subscribe to https://aws.amazon.com/marketplace/pp/B00O7WM7QW first if using CentOS

  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: Choose the Cidr (/16) block you want to use for your VPC (eg 10.0.0.0/16)
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/16'
    ConstraintDescription: Your VPC must use x.x.x./16 CIDR range

  ClientIp:
    Type: String
    Description: Default IP(s) allowed to directly SSH into the scheduler and access ElasticSearch. 0.0.0.0/0 means ALL INTERNET access. You probably want to change it with your own IP/subnet (x.x.x.x/32 for your own ip or x.x.x.x/24 for range. Replace x.x.x.x with your own PUBLIC IP. You can get your public IP using tools such as https://ifconfig.co/). Make sure to keep it restrictive!
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: ClientIP must be a valid IP or network range of the form x.x.x.x/x. If you want to add everyone (not recommended) use 0.0.0.0/0 otherwise specify your IP/NETMASK (e.g x.x.x/32 or x.x.x.x/24 for subnet range)

  SSHKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Default SSH pem keys used to SSH into the scheduler

  S3InstallBucket:
    Type: String
    Default: soca-china-deployment
    Description: Name of your S3 Bucket where you uploaded your install files
    AllowedPattern: '(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)'
    ConstraintDescription: You must specify the bucket NAME only (no s3:// or https://bucket.s3.amazonaws.com)

  S3InstallFolder:
    Type: String
    Default: scale-out-computing-on-aws/v2.5.0
    Description: Name of the S3 folder where you uploaded SOCA

  S3PatchBucket:
    Type: String
    Default: nowfox
    Description: Name of your S3 Bucket where you uploaded your patch files
    AllowedPattern: '(?=^.{3,63}$)(?!^(\d+\.)+\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])\.)*([a-z0-9]|[a-z0-9][a-z0-9\-]*[a-z0-9])$)'
    ConstraintDescription: You must specify the bucket NAME only (no s3:// or https://bucket.s3.amazonaws.com)

  S3PatchFolder:
    Type: String
    Default: soca/v2.5.1
    Description: Name of the S3 folder where you uploaded your patch files

  UserName:
    Type: String
    MinLength: 3

  UserPassword:
    NoEcho: true
    Type: String
    MinLength: 5
    MaxLength: 50
    AllowedPattern: "^[A-Za-z]+[a-zA-Z0-9@!#+_^{}\\[\\]()]*$"
    Description: "5 characters minimum. Must start with a letter. Special chars accepted: !#@+_^{}[]()"
    ConstraintDescription: "5 characters minimum. Must start with a letter. Special chars accepted: !#@+_^{}[]()"

Mappings:
  Send:
    AnonymousUsage:
      Data: Yes # Must be either Yes or No. Do not use any single or double quotes. Refer to https://docs.aws.amazon.com/solutions/latest/scale-out-computing-on-aws/appendix-d.html

  Info:
    Data:
      ClusterIdPrefix: soca
      Version: 2.5.0
    User:
      centos7: ec2-user
      amazonlinux2: ec2-user
      rhel7: ec2-user



  RegionMap:
    ap-east-1: # Hong Kong
      rhel7: ami-1a453e6b
      centos7: ami-68e59c19
      amazonlinux2: ami-570c7726
    ap-northeast-1: # Tokyo
      rhel7: ami-00b95502a4d51a07e
      centos7: ami-045f38c93733dd48d
      amazonlinux2: ami-0c3fd0f5d33134a76
    ap-northeast-2: # Seoul
      rhel7: ami-041b16ca28f036753
      centos7: ami-06cf2a72dadf92410
      amazonlinux2: ami-095ca789e0549777d
    ap-south-1: # Mumbai
      rhel7: ami-0963937a03c01ecd4
      centos7: ami-02e60be79e78fef21
      amazonlinux2: ami-0d2692b6acea72ee6
    ap-southeast-1: # Singapore
      rhel7: ami-055c55112e25b1f1f
      centos7: ami-0b4dd9d65556cac22
      amazonlinux2: ami-01f7527546b557442
    ap-southeast-2: # Sydney
      rhel7: ami-036b423b657376f5b
      centos7: ami-08bd00d7713a39e7d
      amazonlinux2: ami-0dc96254d5535925f
    ca-central-1: # Canada
      rhel7: ami-06ca3c0058d0275b3
      centos7: ami-033e6106180a626d0
      amazonlinux2: ami-0d4ae09ec9361d8ac
    cn-north-1: # Beijing
      rhel7: ami-0aec480c46b22c341
      centos7: ami-088b61f50b18f807e
      amazonlinux2: ami-0442b0a087508033e
    cn-northwest-1: # Ningxia
      rhel7: ami-05d1efb0d288aa5ed
      centos7: ami-0d8487330873f710c
      amazonlinux2: ami-0959f8e18a2aac0fb
    eu-central-1: # Frankfurt
      rhel7: ami-09de4a4c670389e4b
      centos7: ami-04cf43aca3e6f3de3
      amazonlinux2: ami-0cc293023f983ed53
    eu-north-1: # Stockholm
      rhel7: ami-66f67f18
      centos7: ami-5ee66f20
      amazonlinux2: ami-3f36be41
    eu-west-1: # Dublin
      rhel7: ami-0202869bdd0fc8c75
      centos7: ami-0ff760d16d9497662
      amazonlinux2: ami-0bbc25e23a7640b9b
    eu-west-2: # London
      rhel7: ami-0188c0c5eddd2d032
      centos7: ami-0eab3a90fc693af19
      amazonlinux2: ami-0d8e27447ec2c8410
    eu-west-3: # Paris
      rhel7: ami-0c4224e392ec4e440
      centos7: ami-0e1ab783dc9489f34
      amazonlinux2: ami-0adcddd3324248c4c
    me-south-1: # Bahrain
      rhel7: AMI_NOT_ADDED_YET # /todo Update AMI ID when available
      centos7: ami-08529c51dbe004acb
      amazonlinux2: ami-0624cbc1598d12691
    us-east-1: # Virginia
      rhel7: ami-000db10762d0c4c05
      centos7: ami-02eac2c0129f6376b
      amazonlinux2: ami-0b898040803850657
    us-east-2: # Ohio
      rhel7: ami-094720ddca649952f
      centos7: ami-0f2b4fc905b0bd1f1
      amazonlinux2: ami-0d8f6eb4f641ef691
    us-west-1: # Northern California
      rhel7: ami-04642fc8fca1e8e67
      centos7: ami-074e2d6769f445be5
      amazonlinux2: ami-056ee704806822732
    us-west-2: # Oregon
      rhel7: ami-036affea69a1101c9
      centos7: ami-01ed306a12b7d1c96
      amazonlinux2: ami-082b5a644766e0e6f
    sa-east-1: # Sao Paulo
      rhel7: ami-05c1c16cac05a7c0b
      centos7: ami-0b8d86d4bf91850af
      amazonlinux2: ami-058943e7d9b9cabfb

Conditions:
  UseCustomAMI: !Not [!Equals [!Ref CustomAMI, ""]]

Resources:
  # ============ BEGIN PRE-REQUISITE ============ #
  CheckPreRequisiteRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "* is reduced to minimal pattern"

    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: PreRequisite
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [ "", [ "arn:", !Ref "AWS::Partition", ":logs:", !Ref "AWS::Region", ":", !Ref  "AWS::AccountId", ":log-group:/aws/lambda/", !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ], "*"] ]

  CheckPreRequisiteLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Check Pre-Requisite for SOCA
      FunctionName: !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName", "PreRequisitesCheck"] ]
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt CheckPreRequisiteRole.Arn
      Runtime: python3.7
      Timeout: 180
      Tags:
        - Key: soca:ClusterId
          Value: !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ]
      Code:
        ZipFile: !Sub |
          import cfnresponse
          '''
          Check SOCA Pre-Requisite
          '''

          def lambda_handler(event, context):
            region = event['ResourceProperties']['Region']
            stack_name = event['ResourceProperties']['StackName']
            regions_blacklist = ['us-west-1'] # only 2 AZ

            if region in regions_blacklist:
              error_message = 'Sorry, this region is not yet supported by SOCA'
              cfnresponse.send(event, context, cfnresponse.FAILED, {'error': error_message}, error_message)
              return error_message

            if stack_name.__len__() > 20:
              error_message = 'Please use a stack name smaller than 20 characters'
              cfnresponse.send(event, context, cfnresponse.FAILED, {'error': error_message}, error_message)
              return error_message

            stack_name_has_caps = any(c.isupper() for c in stack_name)
            if stack_name_has_caps is True:
              error_message = 'Do not use any uppercase in the stack name'
              cfnresponse.send(event, context, cfnresponse.FAILED, {'error': error_message}, error_message)
              return error_message

            cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, 'Pre-Requisites OK')

  CheckSOCAPreRequisite:
    DependsOn: CheckPreRequisiteLambda
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CheckPreRequisiteLambda.Arn
      Region: !Ref "AWS::Region"
      StackName: !Ref "AWS::StackName"
  # ============ END PRE-REQUISITE ============ #

  Network:
    DependsOn: CheckSOCAPreRequisite
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcCidr: !Ref VpcCidr
        ClusterId: !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ]
      TimeoutInMinutes: 30
      #TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Network.template"] ]
      TemplateURL: !Join [ "", [ "https://", !Ref S3InstallBucket, ".s3.cn-northwest-1.amazonaws.com.cn/", !Ref S3InstallFolder, "/templates/Network.template"] ]

  Security:
    DependsOn: Network
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        VpcId: !GetAtt Network.Outputs.VpcId
        ClientIp: !Ref ClientIp
        ClusterId: !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ]
        S3InstallBucket: !Ref S3InstallBucket
        S3InstallFolder: !Ref S3InstallFolder
      #TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Security.template"] ]
      TemplateURL: !Join [ "", [ "https://", !Ref S3InstallBucket, ".s3.cn-northwest-1.amazonaws.com.cn/", !Ref S3InstallFolder, "/templates/Security.template"] ]
      TimeoutInMinutes: 30

  Scheduler:
    DependsOn: Security
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SSHKeyPair: !Ref SSHKeyPair
        SchedulerInstanceType: !Ref SchedulerInstanceType
        SubnetId: !GetAtt Network.Outputs.PublicSubnet1
        SecurityGroupId: !GetAtt Security.Outputs.SchedulerSecurityGroup
        SchedulerIAMInstanceProfile: !GetAtt Security.Outputs.SchedulerIAMInstanceProfile
        S3InstallFolder: !Ref S3InstallFolder
        S3Bucket: !Ref S3InstallBucket
        S3PatchFolder: !Ref S3PatchFolder
        S3PatchBucket: !Ref S3PatchBucket
        Version: !FindInMap [ Info, Data, Version ]
        ClusterId: !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ]
        ImageId: !If [UseCustomAMI, !Ref CustomAMI, !FindInMap [RegionMap, !Ref "AWS::Region", !Ref BaseOS]]
        AppsSnapId: !Ref AppsEBSSnap
        BaseOS: !Ref BaseOS
        UserName: !Ref UserName
        UserPassword: !Ref UserPassword
      #TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Scheduler.template"] ]
      TemplateURL: !Join [ "", [ "https://", !Ref S3PatchBucket, ".s3.cn-northwest-1.amazonaws.com.cn/", !Ref S3PatchFolder, "/templates/Scheduler-without-es.template"] ]
      TimeoutInMinutes: 60

  Viewer:
    DependsOn: Scheduler
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SchedulerSecurityGroup: !GetAtt Security.Outputs.SchedulerSecurityGroup
        PublicSubnet1: !GetAtt Network.Outputs.PublicSubnet1
        PublicSubnet2: !GetAtt Network.Outputs.PublicSubnet2
        PublicSubnet3: !GetAtt Network.Outputs.PublicSubnet3
        ClusterId: !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ]
        VpcId: !GetAtt Network.Outputs.VpcId
        SchedulerInstanceId: !GetAtt Scheduler.Outputs.SchedulerInstanceId
        SchedulerIAMRole: !GetAtt Security.Outputs.SchedulerIAMRole
        LambdaACMIAMRoleArn: !GetAtt Security.Outputs.LambdaACMIAMRoleArn
      #TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Viewer.template"] ]
      TemplateURL: !Join [ "", [ "https://", !Ref S3InstallBucket, ".s3.cn-northwest-1.amazonaws.com.cn/", !Ref S3InstallFolder, "/templates/Viewer.template"] ]
      TimeoutInMinutes: 30


  Configuration:
    DependsOn: Viewer
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SchedulerInstanceId: !GetAtt Scheduler.Outputs.SchedulerInstanceId
        SchedulerPrivateDnsName: !GetAtt Scheduler.Outputs.SchedulerPrivateDnsName
        SchedulerPrivateIP: !GetAtt Scheduler.Outputs.SchedulerPrivateIP
        SchedulerPublicIP: !GetAtt Scheduler.Outputs.SchedulerPublicIP
        SchedulerSecurityGroup: !GetAtt Security.Outputs.SchedulerSecurityGroup
        ComputeNodeIAMRoleArn: !GetAtt Security.Outputs.ComputeNodeIAMRoleArn
        ComputeNodeIAMRole: !GetAtt Security.Outputs.ComputeNodeIAMRole
        ComputeNodeInstanceProfileArn: !GetAtt Security.Outputs.ComputeNodeInstanceProfileArn
        SchedulerIAMRoleArn: !GetAtt Security.Outputs.SchedulerIAMRoleArn
        SpotFleetIAMRoleArn: !GetAtt Security.Outputs.SpotFleetIAMRoleArn
        SchedulerIAMRole: !GetAtt Security.Outputs.SchedulerIAMRole
        ComputeNodeSecurityGroup: !GetAtt Security.Outputs.ComputeNodeSecurityGroup
        VpcId: !GetAtt Network.Outputs.VpcId
        PublicSubnet1: !GetAtt Network.Outputs.PublicSubnet1
        PublicSubnet2: !GetAtt Network.Outputs.PublicSubnet2
        PublicSubnet3: !GetAtt Network.Outputs.PublicSubnet3
        PrivateSubnet1: !GetAtt Network.Outputs.PrivateSubnet1
        PrivateSubnet2: !GetAtt Network.Outputs.PrivateSubnet2
        PrivateSubnet3: !GetAtt Network.Outputs.PrivateSubnet3
        EFSDataDns: !GetAtt Scheduler.Outputs.SchedulerPrivateIP
        EFSAppsDns: !GetAtt Scheduler.Outputs.SchedulerPrivateIP
        S3InstallFolder: !Ref S3InstallFolder
        Version: !FindInMap [ Info, Data, Version ]
        S3Bucket: !Ref S3InstallBucket
        S3PatchBucket: !Ref S3PatchBucket
        S3PatchFolder: !Ref S3PatchFolder
        ClusterId: !Join [ "-", [ !FindInMap [ Info, Data, ClusterIdPrefix ], !Ref "AWS::StackName"] ]
        SSHKeyPair: !Ref SSHKeyPair
        ImageId: !If [UseCustomAMI, !Ref CustomAMI, !FindInMap [RegionMap, !Ref "AWS::Region", !Ref BaseOS]]
        LoadBalancerDNSName: !GetAtt Viewer.Outputs.LoadBalancerDNSName
        LoadBalancerArn: !GetAtt Viewer.Outputs.LoadBalancerArn
        BaseOS: !Ref BaseOS
        SolutionMetricsRoleArn: !GetAtt Security.Outputs.SolutionMetricsRoleArn
        DefaultMetricCollection: !FindInMap [ Send, AnonymousUsage, Data ]
      #TemplateURL: !Join [ "/", [!Sub "https://s3.${AWS::URLSuffix}", !Ref S3InstallBucket, !Ref S3InstallFolder, "templates/Configuration.template"] ]
      TemplateURL: !Join [ "", [ "https://", !Ref S3PatchBucket, ".s3.cn-northwest-1.amazonaws.com.cn/", !Ref S3PatchFolder, "/templates/Configuration-without-es.template"] ]
      TimeoutInMinutes: 60

Outputs:
  SchedulerPublicIP:
    Value: !GetAtt Scheduler.Outputs.SchedulerPublicIP
  LDAPMasterUsername:
    Value: admin
  LDAPMasterPassword:
    Value: /root/OpenLdapAdminPassword.txt
  ConnectionString:
    Value: !Join [ "", [ "ssh -i ", !Ref SSHKeyPair, ".pem ", !FindInMap [ Info, User, !Ref BaseOS ], "@", !GetAtt Scheduler.Outputs.SchedulerPublicIP]]
  WebUserInterface:
    Value: !Join [ "", [ "https://", !GetAtt Viewer.Outputs.LoadBalancerDNSName]]
  BaseOS:
    Value: !Ref BaseOS
  BaseAMI:
    Value: !If [UseCustomAMI, !Ref CustomAMI, !FindInMap [RegionMap, !Ref "AWS::Region", !Ref BaseOS]]
  Version:
    Value: !FindInMap [ Info, Data, Version ]
